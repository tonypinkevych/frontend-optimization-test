import Head from "next/head";
import classnames from "classnames";
import * as React from "react";

const MAX_COUNT = 100;

// @NOTE: just heave computation, you can ignore it
async function heavyCalculation(n: number): Promise<number> {
  const start = new Date().getTime();

  let result = 0;
  for (let i = 0; i < n; i++) {
    result += i * i;
  }
  const end = new Date().getTime();
  console.log("CALCULATION TAKES MS", end - start);
  return Promise.resolve(result);
}

export default function Home() {
  const [rows, setRows] = React.useState<number[]>([]);
  const [isCalculating, setIsCalculating] = React.useState(false);

  React.useEffect(() => {
    setInterval(async () => {
      console.log("---- START");
      setIsCalculating(true);

      await heavyCalculation(100_000_000);

      setRows((_rows) => {
        if (_rows.length >= MAX_COUNT) {
          return _rows;
        }

        return [..._rows, _rows.length + 1];
      });

      setIsCalculating(false);
      console.log("---- END");
    }, 100);
  }, []);

  return (
    <div>
      <Head>
        <title>Optimization Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-20">
        <h1 className="text-center text-3xl">Optimization Test</h1>

        <p
          className="transition-all duration-150 cubic-bezier(0.5, 0.35, 0.15, 1) text-center"
          style={{
            // @TODO: blinking should work
            opacity: isCalculating ? 0 : 100,
          }}
        >
          Calculating...
        </p>

        <ul className="flex flex-col items-center mt-20">
          {rows.map((item, idx) => (
            <li
              key={idx}
              className={classnames("relative text-[8px] animate", {
                "animate-wiggle": idx % 2 === 0,
                "animate-wiggle-reversed": idx % 2 === 1,
              })}
              style={{
                animationDelay: `${idx * 10}ms`,
                animationFillMode: "both",
              }}
            >
              {item}
            </li>
          ))}
        </ul>
      </main>
    </div>
  );
}
